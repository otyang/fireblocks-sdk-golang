
// func ParsePublicKey(publicKey string) (*rsa.PublicKey, error) {
// 	block, _ := pem.Decode([]byte(publicKey))
// 	if block == nil {
// 		return nil, errors.New("failed to parse PEM block containing the public key")
// 	}

// 	parsedPublicKey, err := x509.ParsePKIXPublicKey(block.Bytes)
// 	if err != nil {
// 		return nil, fmt.Errorf("failed to parse DER encoded public key: %w", err)
// 	}

// 	rsaPK, ok := parsedPublicKey.(*rsa.PublicKey)
// 	if !ok {
// 		return nil, errors.New("not of type rsa public key")
// 	}

// 	return rsaPK, nil
// }

// // VerifySignature validates the signature string
// func VerifySignature(key *rsa.PublicKey, payload []byte, signature string) error {
// 	dec, err := base64.URLEncoding.DecodeString(signature)
// 	if err != nil {
// 		return errors.New("Could not decode signature string")
// 	}

// 	digest := sha512.Sum512([]byte(payload))

// 	err = rsa.VerifyPSS(key, crypto.SHA256, digest[:], dec, nil)

// 	if err != nil {
// 		return err
// 	}

// 	return nil
// }
